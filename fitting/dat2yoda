#! /usr/bin/env python

import yoda, os, glob, optparse, math
op = optparse.OptionParser()
op.add_option("-e", "--err", dest="ERR", metavar="FRAC", type=float, default=None,
              help="set errs to this fraction of the central value if otherwise 0")
opts, args = op.parse_args()

for run in args:
    aos = {}

    infiles = glob.glob( os.path.join(run, "*.dat") )
    for infile in infiles:
        hname = os.path.basename(infile).replace(".dat", "")
        # if hname == "pt":
        #     continue
        with open(infile) as f:
            s = yoda.Scatter2D("/TOPFITTER/" + hname)
            valslist = [[float(x) for x in line.split()] for line in f.readlines()]
            for n, vals in enumerate(valslist):
                if len(vals) == 0:
                    continue
                yerr = None # TODO: need a proper y error
                if len(vals) == 2: # no x value
                    yerr = vals[1] if vals[1] else opts.ERR * vals[0] if opts.ERR else 0.0
                    s.addPoint(0, vals[0], 0, yerr)
                else: # if len(vals) >= 3:
                    ## Work out bin edges (sigh)
                    x = vals[0]
                    xerrm = ( x - valslist[n-1][0])/2 if n-1 >= 0 else 0
                    xerrp = (-x + valslist[n+1][0])/2 if n+1 < len(valslist) else 0
                    # TODO: reinstate for setting missing m/p errs on first and last bins
                    #
                    # if xerrm is None and xerrp is not None:
                    #     xerrm = xerrp
                    # if xerrp is None and xerrm is not None:
                    #     xerrp = xerrm
                    ##
                    if not xerrm and not xerrp:
                        xerrm = xerrp = 0.5
                    #
                    y = vals[1]
                    yerr = None
                    if opts.ERR:
                        yerr = opts.ERR * y
                    else:
                        yerr2 = sum(v*v for v in vals[2:])
                        yerr = math.sqrt(yerr2)
                    s.addPoint(x, y, (xerrm, xerrp), yerr)
            if s.numPoints:
                aos[hname] = s

    outfile = os.path.join(run, "data.yoda")
    print "Writing {} histos to {}".format(len(aos), outfile)
    yoda.write(aos, outfile)
