#! /usr/bin/env python

"""\
Usage: %prog procdir1 [procdir2 ...]
"""

import optparse, os
op = optparse.OptionParser(usage=__doc__)
op.add_option("-o", "--out", dest="OUTDIR", default="fit")
opts, args = op.parse_args()

## Make output dirs
import os, shutil, glob
refdir = os.path.join(opts.OUTDIR, "ref")
if not os.path.isdir(refdir):
    os.makedirs(refdir)
mcdir = os.path.join(opts.OUTDIR, "mc")
if not os.path.isdir(mcdir):
    os.makedirs(mcdir)
corrdir = os.path.join(opts.OUTDIR, "corr")
if not os.path.isdir(corrdir):
    os.makedirs(corrdir)    

datadir='events_data'
mcindir='events_mc'

def main():

    ## Convert histos in each process group

    ## if no args use current directory
    if not args: 
        fittabledata2prof(os.getcwd())
    ## or take a list of input directories
    else:
        for procdir in args:
            fittabledata2prof(procdir)

def fittabledata2prof(procdir):

        import yoda
        if not os.path.isdir(procdir):
            print procdir, "is not a directory"
            exit(1)

        # Sanitise proc path by removing initial slashes, ./, etc.
        if os.path.isabs(procdir):
            proc = os.path.basename(procdir).strip("/").upper()
        else:
            proc = procdir.strip("/").upper()

        ## Convert ref data into new dir
        infiles_ref = glob.glob( os.path.join(procdir, datadir, "*.dat") )
        aos = []
        for f in infiles_ref:
            s = dat2yoda(f, "/REF/"+proc)
            aos.append(s)
        reffile = os.path.join(refdir, proc.replace("/", "_")+".yoda")
        #print "Writing ref data into", reffile
        yoda.write(aos, reffile)

        ## Include bin to bin covariance matrices on data
        infiles_corr = glob.glob( os.path.join(procdir, "correlations", "*.dat") )
        for f in infiles_corr:
            k = proc.replace("/","_").upper()+"_"+f.split("/")[-1]            
            shutil.copy(f,os.path.join(corrdir,k))

        ## Convert sampled data into new dirs
        rundirs = sorted([x[0] for x in os.walk(os.path.join(procdir, mcindir))][1:])
        for rd in rundirs:
            run = os.path.basename(rd)
            infiles = glob.glob( os.path.join(rd, "*.dat") )

            aos = []
            for f in infiles:
                s = dat2yoda(f, "/"+proc)
                aos.append(s)
            mcrundir = os.path.join(mcdir, run)
            if not os.path.isdir(mcrundir):
                os.makedirs(mcrundir)
            mcfile = os.path.join(mcrundir, proc.replace("/", "_")+".yoda")
            #print "Writing MC data into", mcfile
            yoda.write(aos, mcfile)

            ## Copy used_params to output
            upfile_src = os.path.join(rd, "used_params")
            upfile_dst = os.path.join(mcrundir, "used_params")
            import filecmp
            if not os.path.exists(upfile_dst):
                shutil.copy(upfile_src, upfile_dst)
            elif not filecmp.cmp(upfile_src, upfile_dst):
                print upfile_src, "differs from already existing", upfile_dst
                exit(2)

        #print "Writing {} histos to {}".format(len(aos), outfile)



def dat2yoda(infile, prefix="/TOPFITTER"):
    import yoda, math, os
    hname = os.path.basename(infile).replace(".dat", "")

    s = None
    with open(infile) as f:
        s = yoda.Scatter2D(os.path.join(prefix, hname))
        valslist = [[float(x) for x in line.split()] for line in f.readlines()]
        for n, vals in enumerate(valslist):
            if len(vals) == 0:
                continue
            yerr = None
            if len(vals) == 2: # no x value
                yerr = vals[1] if vals[1] else 0.0 #opts.ERR * vals[0] if opts.ERR else 0.0
                s.addPoint(0, vals[0], 0, yerr)
            elif len(vals) >= 4: #format xlow xhigh y deltay
                xerrm = vals[0]
                xerrp = vals[1]
                x = (xerrp + xerrm) /2
                if not xerrm and not xerrp:
                    xerrm = xerrp = 0.5
                y = vals[2]
                yerr2 = sum(v**2 for v in vals[3:])
                yerr = math.sqrt(yerr2)
                s.addPoint(x, y, (xerrm, xerrp), yerr)
            else:
                print "What is this data format supposed to be?"
                continue
    return s #if s.numPoints else None


if __name__ == "__main__":
    main()
