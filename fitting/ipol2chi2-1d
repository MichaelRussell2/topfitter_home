#! /usr/bin/env python2.7

"""\
%prog <datadir>

Calculate 1D chi2 for a given coefficient with all others set to zero, and optionally display its 95% confidence intervals
"""

##TODO: Compare to a delta chi2 treatment of limits?

import optparse
op = optparse.OptionParser()
op.add_option("--ifile", dest="IFILE", default="ipol.dat", help="file from which to read the bin interpolations (default: %default)")
op.add_option("--npts", dest="NPOINTS", type=int, default=201, help="number of points in the parameter line (default: %default)")
op.add_option("--coeff", dest="COEFF", default="0", help="parameter to marginalise/slice in (default: %default)")
op.add_option("--cls", dest="CLS", default=False, action="store_true", help="output 95% confidence limits and best fit point for given coefficient")
op.add_option("--deltas", dest="DELTAS", default=False, action="store_true", help="compare raw chi2 and delta chi2 confidence limits")
op.add_option("--range", dest="BOUNDS", default="-1000,1000",help="range of coefficient to scan over (default: %default)")

opts, args = op.parse_args()
DATADIR = args[0]

low, high = map(int, opts.BOUNDS.split(","))

import professor2 as prof
import numpy as np
import math

## Load interpolated histograms from file
IMETA = prof.read_meta(opts.IFILE)
IHISTOS = prof.read_binnedipol(opts.IFILE)
HNAMES = IHISTOS.keys()

## Extract parameter info from ipol file
PARAMNAMES = IMETA["ParamNames"].split()
NOPS = len(PARAMNAMES)

## Read reference data histos
import os, glob
DHISTOS = {}
reffiles = glob.glob(os.path.join(DATADIR, "ref", "*"))
for rf in reffiles:
    DHISTOS.update(prof.read_histos(rf))
## Remove /REF prefixes
DHISTOS = { p.replace("/REF", "") : h for (p, h) in DHISTOS.iteritems() }

## Read MC ipol histos and find max errors in each bin
RUNDIRS = glob.glob(os.path.join(DATADIR, "mc", "*"))
_, MCHISTOS = prof.load_rundata(RUNDIRS,"used_params")
MAXERRS = {}

##Regulate ipol error to stop v. large errors at edges of param space
for hn, hs in MCHISTOS.iteritems():
    numbins_h = DHISTOS[hn].nbins
    maxerrs_h = []
    for ib in xrange(numbins_h):
        emax = max(h.bins[ib].err for h in hs.values())
        maxerrs_h.append(emax)
    MAXERRS[hn] = maxerrs_h

## Exclude unwanted data
for i, hn in enumerate(HNAMES):
    keep = True
    # if "ATLAS_TCHAN_7TEV_TOP/pt" in hn or "ATLAS_TCHAN_7TEV_ANTITOP/pt" in hn:
    #     IHISTOS[hn].bins = IHISTOS[hn].bins[:-2]
    #     DHISTOS[hn].bins = DHISTOS[hn].bins[:-2]
    if not keep:
        print "Skipping", hn
        del HNAMES[i]


print

def chi2_hist(ihist, dhist, params, errmaxs=None):
    assert len(ihist.bins) == len(dhist.bins)
    chi2, ndf = 0.0, 0
    covmatfile = DATADIR+ "/corr/" + dhist.path.replace("/", "_").replace("REF","").strip("_") + ".dat"
    if os.path.exists(covmatfile): 
        covmat = np.loadtxt(covmatfile) 
    else:
        covmat = np.identity(len(ihist.bins))
    for nb1, (ib1, db1) in enumerate(zip(ihist.bins, dhist.bins)):
        for nb2, (ib2, db2) in enumerate(zip(ihist.bins, dhist.bins)):
            if (nb1 <= nb2 ):
                cov12 = covmat[nb1,nb2]
                ival1, ival2 = ib1.val(params), ib2.val(params)
                dy1, dy2  = ival1 - db1.val, ival2 - db2.val
                ierr1, ierr2 = ib1.err(params), ib2.err(params)
                ipolerr1, ipolerr2 = 0.05*ival1, 0.05*ival2
                derr1, derr2 = db1.err, db2.err
                ey12, ey22 = derr1**2 + ierr1**2 + ipolerr1**2,  derr2**2 + ierr2**2 + ipolerr2**2
                ey2 = math.sqrt(ey12*ey22)
                if (dy1 and not ey2):# or (dy2 and not ey2):
                    print "WARNING: Zero error for non-zero bin in chi2 calculation for %s:%d. Skipping..." % (ihist, nb)
                    continue
                if (ey2):
                    chi2_b = dy1*cov12*dy2/ey2
                    chi2 += chi2_b
            else:
                # print "This pair of bins has already been counted once!"
                continue
        ndf += 1
    return chi2, ndf

def chi2_tot(ihists, dhists, params, hnames=None, errmaxs={}):
    chi2_tot, ndf_tot = 0, 0
    if not hnames:
        hnames = ihists.keys()
    for hn in hnames:
        chi2_h, ndf_h = chi2_hist(ihists[hn], dhists[hn], params, errmaxs.get(hn))
        chi2_tot += chi2_h
        ndf_tot += ndf_h
    return chi2_tot, ndf_tot

RANGES = [(low, high) for i in xrange(NOPS)]
N = opts.NPOINTS

I1= int(float(opts.COEFF))
print "Making C_%d scan" % (I1+1)
paramidstr = "C%d" % (I1+1)

## Define a chi2 function over the remaining params
def chi2_marginalise_6(a,b,c,d,e):
    global NBINS
    freeargs = [e,d,c,b,a]
    args = []
    for i in xrange(6):
        if i == I1:
            args.append(X)
        else:
            args.append(freeargs.pop())
    assert len(args) == 6
    assert len(freeargs) == 0
    c2, NBINS = chi2_tot(IHISTOS, DHISTOS, args, HNAMES, MAXERRS)
    return c2

def chi2_marginalise_12(a,b,c,d,e,f,g,h,i,j):
    global NBINS
    freeargs = [j,i,h,g,f,e,d,c,b,a]
    args = []
    for i in xrange(12):
        if i == I1:
            args.append(X)
        else:
            args.append(freeargs.pop())
    assert len(args) == 12
    assert len(freeargs) == 0
    c2, NBINS = chi2_tot(IHISTOS, DHISTOS, args, HNAMES, MAXERRS)
    return c2

## Step size
xs = np.linspace(RANGES[I1][0], RANGES[I1][1], N)
step = (high-low)/(N-1)

from scipy import stats as st

## Loop over steps, calculate 95% conf interval
NBINS = None
npoint = 0
chi2s_slice = np.full([N], np.nan)
XC = []

for IX, X in enumerate(xs):
    npoint += 1

    ## Set all other params = 0
    if NOPS == 3:
        chi2_slice = chi2_marginalise_3(0,0)
    elif NOPS == 5:
        chi2_slice = chi2_marginalise_5(0,0,0,0)
    elif NOPS == 7:
        chi2_slice = chi2_marginalise_6(0,0,0,0,0)
    elif NOPS == 12:
        chi2_slice = chi2_marginalise_12(0,0,0,0,0,0,0,0,0,0)
    chi2s_slice[IX] = chi2_slice

    ## Use scipy to calculate 95% conf intervals, with ndf = nbins
    if (opts.CLS):
        cl = st.chi2.ppf(0.95, NBINS)
        if (chi2_slice < cl ):
            XC.append(X)

## Best fit point (there must be a neater way of getting this?)            
Xmin =  low+step*np.argmin(chi2s_slice)
chi2min = np.min(chi2s_slice)


if (opts.CLS):
    print
    print 'RAW CHI2 LIMITS:'        
    print '95%% c.l. on coefficient %s = (%.f, %.f)' % (paramidstr, XC[0], XC[-1])
    print 'Best fit point at %s = %.f' % (paramidstr, Xmin)

if (opts.DELTAS):
    delta_chi2_slice = np.full([N], np.nan)
    XC = []
    for IX, X in enumerate(xs):
        npoint += 1
        delta_chi2_slice[IX] = chi2s_slice[IX]- chi2min

        ## As before but with delta-chi2 limit setting
        cl = st.chi2.ppf(0.95, 1)
        if (delta_chi2_slice[IX] < cl ):
            XC.append(X)
                
    print
    print 'DELTA CHI2 LIMITS:'
    print '95%% c.l. on coefficient %s = (%.f, %.f)' % (paramidstr, XC[0], XC[-1])
    print 'Best fit point at %s = %.f' % (paramidstr, Xmin)
    print
    
    
                        
        
    
np.savetxt("chi2s_slice_%dd_%s.dat" % (NOPS, paramidstr), chi2s_slice.T, fmt="%.10f")
#np.savetxt("delta_chi2s_slice_%dd_%s.dat" % (NOPS, paramidstr), chi2s_slice.T, fmt="%.10f")

